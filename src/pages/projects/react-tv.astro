---
import Layout from "../../layouts/Layout.astro";
import { Image } from 'astro:assets';
import reacttvDesktop from '../../components/projects/images/react-tv/react-tv-desktop.png';
import reacttvMobile from '../../components/projects/images/react-tv/react-tv-mobile.png';

const pageTitle = "Projet React TV";
const pageDescription = "Application React de recherche et mise en favori de séries tv à partir d'une base de données externe";
const pageTitleOG = "Projet React TV";
const OGType = "article";
---

<Layout pageTitle={pageTitle} pageDescription={pageDescription} pageTitleOG={pageTitleOG} OGType={OGType}>
    <article class="max-w-6xl m-auto px-4 text-white py-10 md:py-16">
        <h1 class="font-title font-bold tracking-wider text-4xl md:text-6xl text-neutral-100 mb-6 md:mb-12">{pageTitle}</h1>
        <p class="lg:max-w-3xl font-text md:text-lg text-neutral-400 mb-8">Application permettant de rechercher des séries TV dans une base de données externe via une API et de sauvegarder ses titres favoris.</p>
        
        <div class="relative overflow-x-auto max-w-3xl mb-12">
            <table class="w-full font-text text-sm text-left text-neutral-400">
                <thead class="uppercase text-xs text-neutral-100">
                    <tr>
                        <th scope="col" class="px-6 py-3">
                            Stack
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Code
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Démo
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="">
                        <td class="px-6 py-2">
                            React
                        </td>
                        <td class="px-6 py-2">
                            <a aria-label="GitHub (s'ouvre dans un nouvel onglet)" class="text-sky-300 hover:text-sky-400 transition-colors duration-300" href="https://github.com/nicomil59/react-tv" target="_blank">
                                <svg class="h-5 w-5"  width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z"/>  <path d="M9 19c-4.286 1.35-4.286-2.55-6-3m12 5v-3.5c0-1 .099-1.405-.5-2 2.791-.3 5.5-1.366 5.5-6.04a4.567 4.567 0 0 0 -1.333 -3.21 4.192 4.192 0 00-.08-3.227s-1.05-.3-3.476 1.267a12.334 12.334 0 0 0 -6.222 0C6.462 2.723 5.413 3.023 5.413 3.023a4.192 4.192 0 0 0 -.08 3.227A4.566 4.566 0 004 9.486c0 4.64 2.709 5.68 5.5 6.014-.591.589-.56 1.183-.5 2V21" /></svg>
                              </a>
                        </td>
                        <td class="px-6 py-2">
                            <a aria-label="Démo live (s'ouvre dans un nouvel onglet)" class="text-sky-300 hover:text-sky-400 transition-colors duration-300" href="https://nicomil59.github.io/react-tv" target="_blank">
                                <svg class="h-5 w-5"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round">  <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />  <polyline points="15 3 21 3 21 9" />  <line x1="10" y1="14" x2="21" y2="3" /></svg>
                              </a>
                        </td>
                    </tr>
                    <tr class="">
                        <td class="px-6 py-2">
                            Sass
                        </td>
                    </tr>
                    <tr class="">
                        <td class="px-6 py-2">
                            Axios
                        </td>
                    </tr>
                    <tr class="">
                        <td class="px-6 py-2">
                            Moment.js
                        </td>
                    </tr>
                    <tr class="">
                        <td class="px-6 py-2">
                            GitHub Pages
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <Image src={reacttvDesktop} alt="React TV en version desktop" class="rounded mb-8" /> 
        
        <div class="flex flex-col mb-8 md:mb-12">
            <section class="py-8 md:py-12">
                <h2 class="text-3xl md:text-4xl font-title font-medium text-neutral-100 tracking-wide mb-8 md:mb-16 flex items-center gap-2 md:gap-4"><svg class="h-8 w-8 md:h-10 md:w-10 text-sky-300 hover:rotate-2 transition duration-300"  width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z"/>  <circle cx="5" cy="5" r="1" />  <circle cx="12" cy="5" r="1" />  <circle cx="19" cy="5" r="1" />  <circle cx="5" cy="12" r="1" />  <circle cx="12" cy="12" r="1" />  <circle cx="19" cy="12" r="1" />  <circle cx="5" cy="19" r="1" />  <circle cx="12" cy="19" r="1" />  <circle cx="19" cy="19" r="1" /></svg><span>objectif</span></h2>
                <p class="font-text text-neutral-400 max-w-3xl leading-relaxed">Le but du projet React TV était de créer une application simple permettant de mettre en pratique les fondamentaux de React, en particulier l'utilisation des hooks. Il s'agissait de gérer un système de navigation dynamique, d'implémenter un formulaire interactif et de récupérer des données externes via une API.</p>
            </section>
            
            <section class="py-8 md:py-12 self-end flex flex-col">
                <h2 class="text-3xl md:text-4xl font-title font-medium text-neutral-100 tracking-wide mb-8 md:mb-16 flex items-center gap-2 md:gap-4 self-end"><svg class="h-8 w-8 md:h-10 md:w-10 text-sky-300 hover:rotate-2 transition duration-300"  width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z"/>  <circle cx="5" cy="5" r="1" />  <circle cx="12" cy="5" r="1" />  <circle cx="19" cy="5" r="1" />  <circle cx="5" cy="12" r="1" />  <circle cx="12" cy="12" r="1" />  <circle cx="19" cy="12" r="1" />  <circle cx="5" cy="19" r="1" />  <circle cx="12" cy="19" r="1" />  <circle cx="19" cy="19" r="1" /></svg><span>fonctionnalités</span></h2>
                <ul class="font-text text-neutral-400 max-w-3xl leading-relaxed">
                    <li class="flex items-center gap-4">
                        <svg class="h-8 w-8 text-sky-300"  fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"/>
                        </svg>
                        <span>Recherche de séries TV via un formulaire.</span>
                    </li>
                    <li class="flex items-center gap-4">
                        <svg class="h-8 w-8 text-sky-300"  fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"/>
                        </svg>
                        <span>Gestion des programmes favoris.</span>
                    </li>
                    <li class="flex items-center gap-4">
                        <svg class="h-8 w-8 text-sky-300"  fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"/>
                        </svg>
                        <span>Tri des séries par note.</span>
                    </li>
                </ul>
            </section>
            
            <section class="py-8 md:py-12">
                <h2 class="text-3xl md:text-4xl font-title font-medium text-neutral-100 tracking-wide mb-8 md:mb-16 flex items-center gap-2 md:gap-4"><svg class="h-8 w-8 md:h-10 md:w-10 text-sky-300 hover:rotate-2 transition duration-300"  width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z"/>  <circle cx="5" cy="5" r="1" />  <circle cx="12" cy="5" r="1" />  <circle cx="19" cy="5" r="1" />  <circle cx="5" cy="12" r="1" />  <circle cx="12" cy="12" r="1" />  <circle cx="19" cy="12" r="1" />  <circle cx="5" cy="19" r="1" />  <circle cx="12" cy="19" r="1" />  <circle cx="19" cy="19" r="1" /></svg><span>choix des technos</span></h2>

                <div class="font-text text-neutral-400 max-w-3xl leading-relaxed">
                    <p class="mb-4">L'utilisation de <strong>React</strong> pour cette application permet de créer une interface utilisateur dynamique et réactive, en facilitant la navigation entre les pages, la gestion de l'état, et le rendu conditionnel des composants, tout en assurant une organisation modulaire du code pour une meilleure maintenabilité.</p>
                    <p class="mb-4">La librairie <strong>React Router</strong> est utilisée pour gérer le système de navigation entre les pages Home et Bookmarks sans rechargement.</p>
                    <p class="mb-2">Les <strong>hooks</strong> de React simplifient grandement l'implémentation des fonctionnalités de l'application :</p>
                    <ul class="flex flex-col gap-2 mb-4">
                        <li>
                            - <code>useState</code> est utilisé notamment pour gérer en temps réel l'état du terme de recherche dans le formulaire.
                        </li>
                        <li>
                            - <code>useEffect</code>, associé à la librairie Axios, permet de réaliser des requêtes API pour récupérer les données de TheMovieDB lors du chargement de l'application et de l’entrée d’un terme dans le formulaire.
                        </li>
                        <li>
                            - <code>useContext</code> facilite le partage de la liste des genres de série (utilisés pour les étiquettes dans les cards), récupérée via une API, en la rendant accessible à tous les composants qui en ont besoin.
                        </li>
                    </ul>
                    <p class="mb-4">La librairie <strong>Moment.js</strong> simplifie le formatage et la manipulation des dates, pour afficher les informations des séries TV avec des formats cohérents et clairs.</p>
                    <p class="">Enfin, le préprocesseur <strong>Sass</strong> facile la gestion du style en permettant d’avoir un code plus structuré.</p>
                </div>

            </section>

            <figure class="self-center my-8">
                <Image src={reacttvMobile} alt="React TV en version mobile" class="rounded" /> 
                <figcaption class="font-text text-sm text-neutral-100 mt-1">Capture d'écran de la version mobile</figcaption>
            </figure>
    
            <section class="py-8 md:py-12 self-end flex flex-col">
                <h2 class="text-3xl md:text-4xl font-title font-medium text-neutral-100 tracking-wide mb-8 md:mb-16 flex items-center gap-2 md:gap-4 self-end"><svg class="h-8 w-8 md:h-10 md:w-10 text-sky-300 hover:rotate-2 transition duration-300"  width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z"/>  <circle cx="5" cy="5" r="1" />  <circle cx="12" cy="5" r="1" />  <circle cx="19" cy="5" r="1" />  <circle cx="5" cy="12" r="1" />  <circle cx="12" cy="12" r="1" />  <circle cx="19" cy="12" r="1" />  <circle cx="5" cy="19" r="1" />  <circle cx="12" cy="19" r="1" />  <circle cx="19" cy="19" r="1" /></svg><span>défis techniques</span></h2>
                <div class="font-text text-neutral-400 max-w-3xl leading-relaxed">
                    <p class="mb-4">Lors d'une recherche, l'API renvoie une liste de séries correspondant au terme recherché. Chaque série est associée à un objet contenant les informations nécessaires pour l'affichage des cartes. Cependant, pour les genres, l'API ne renvoie qu'un tableau d'identifiants numériques. Il est donc nécessaire de faire un second appel API pour obtenir la correspondance entre les genres et leurs identifiants. Plutôt que d'effectuer cet appel dans chaque composant Card, ce qui serait inefficace en termes de performance, il est préférable de récupérer la liste des genres une seule fois.</p>
                    <p class="mb-2">L'utilisation du <strong>contexte</strong> de React résout ce problème efficacement :</p>
                    <ul class="flex flex-col gap-2">
                        <li>
                            - L'appel API est effectué une seule fois.
                        </li>
                        <li>
                            - Les données sont ensuite accessibles directement pour les composants qui en ont besoin, sans passer par les props.
                        </li>
                    </ul>
                </div>
            </section>

        </div>

        <a class="rounded-full text-sm px-3 py-2 md:px-5 md:py-2.5 text-center tracking-wider font-semibold text-neutral-900 border-2 border-sky-300 bg-sky-300 hover:bg-sky-400 hover:border-sky-400 transition-colors duration-300 inline-flex items-center gap-2" href="/#projects"><svg class="h-6 w-6 text-neutral-900"  width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z"/>  <line x1="5" y1="12" x2="19" y2="12" />  <line x1="5" y1="12" x2="9" y2="16" />  <line x1="5" y1="12" x2="9" y2="8" /></svg>Retour à la liste</a>
        
    </article>
</Layout>